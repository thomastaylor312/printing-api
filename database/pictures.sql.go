// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: pictures.sql

package database

import (
	"context"
)

const addPicture = `-- name: AddPicture :one
INSERT INTO pictures (name, user_id) VALUES (?1, ?2) RETURNING id, name, user_id
`

type AddPictureParams struct {
	Name   string `json:"name"`
	UserID int64  `json:"userId"`
}

func (q *Queries) AddPicture(ctx context.Context, arg AddPictureParams) (Picture, error) {
	row := q.queryRow(ctx, q.addPictureStmt, addPicture, arg.Name, arg.UserID)
	var i Picture
	err := row.Scan(&i.ID, &i.Name, &i.UserID)
	return i, err
}

const deletePicture = `-- name: DeletePicture :exec
DELETE FROM pictures WHERE id = ?1
`

func (q *Queries) DeletePicture(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deletePictureStmt, deletePicture, id)
	return err
}

const getPictures = `-- name: GetPictures :many
SELECT id, name, user_id FROM pictures
`

func (q *Queries) GetPictures(ctx context.Context) ([]Picture, error) {
	rows, err := q.query(ctx, q.getPicturesStmt, getPictures)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Picture
	for rows.Next() {
		var i Picture
		if err := rows.Scan(&i.ID, &i.Name, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPicturesByUser = `-- name: GetPicturesByUser :many
SELECT id, name, user_id FROM pictures WHERE user_id = ?1
`

func (q *Queries) GetPicturesByUser(ctx context.Context, userID int64) ([]Picture, error) {
	rows, err := q.query(ctx, q.getPicturesByUserStmt, getPicturesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Picture
	for rows.Next() {
		var i Picture
		if err := rows.Scan(&i.ID, &i.Name, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
