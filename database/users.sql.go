// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"
	"time"
)

const addUser = `-- name: AddUser :one
INSERT INTO users (username, email, is_admin, created) VALUES (?1, ?2, ?3, ?4) RETURNING id, username, email, is_admin, created
`

type AddUserParams struct {
	Username string    `json:"username"`
	Email    string    `json:"email"`
	IsAdmin  bool      `json:"isAdmin"`
	Created  time.Time `json:"created"`
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (User, error) {
	row := q.queryRow(ctx, q.addUserStmt, addUser,
		arg.Username,
		arg.Email,
		arg.IsAdmin,
		arg.Created,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.IsAdmin,
		&i.Created,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = ?1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, email, is_admin, created FROM users WHERE id = ?1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.IsAdmin,
		&i.Created,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, username, email, is_admin, created FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.query(ctx, q.getUsersStmt, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.IsAdmin,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET username = ?1, email = ?2, is_admin = ?3, created = ?4 WHERE id = ?5
`

type UpdateUserParams struct {
	Username string    `json:"username"`
	Email    string    `json:"email"`
	IsAdmin  bool      `json:"isAdmin"`
	Created  time.Time `json:"created"`
	ID       int64     `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.exec(ctx, q.updateUserStmt, updateUser,
		arg.Username,
		arg.Email,
		arg.IsAdmin,
		arg.Created,
		arg.ID,
	)
	return err
}
