// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package database

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addPrintStmt, err = db.PrepareContext(ctx, addPrint); err != nil {
		return nil, fmt.Errorf("error preparing query AddPrint: %w", err)
	}
	if q.deletePrintStmt, err = db.PrepareContext(ctx, deletePrint); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePrint: %w", err)
	}
	if q.getCartsStmt, err = db.PrepareContext(ctx, getCarts); err != nil {
		return nil, fmt.Errorf("error preparing query GetCarts: %w", err)
	}
	if q.getUserCartStmt, err = db.PrepareContext(ctx, getUserCart); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserCart: %w", err)
	}
	if q.updatePrintQuantityStmt, err = db.PrepareContext(ctx, updatePrintQuantity); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePrintQuantity: %w", err)
	}
	if q.upsertCartStmt, err = db.PrepareContext(ctx, upsertCart); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertCart: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addPrintStmt != nil {
		if cerr := q.addPrintStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addPrintStmt: %w", cerr)
		}
	}
	if q.deletePrintStmt != nil {
		if cerr := q.deletePrintStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePrintStmt: %w", cerr)
		}
	}
	if q.getCartsStmt != nil {
		if cerr := q.getCartsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCartsStmt: %w", cerr)
		}
	}
	if q.getUserCartStmt != nil {
		if cerr := q.getUserCartStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserCartStmt: %w", cerr)
		}
	}
	if q.updatePrintQuantityStmt != nil {
		if cerr := q.updatePrintQuantityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePrintQuantityStmt: %w", cerr)
		}
	}
	if q.upsertCartStmt != nil {
		if cerr := q.upsertCartStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertCartStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                      DBTX
	tx                      *sql.Tx
	addPrintStmt            *sql.Stmt
	deletePrintStmt         *sql.Stmt
	getCartsStmt            *sql.Stmt
	getUserCartStmt         *sql.Stmt
	updatePrintQuantityStmt *sql.Stmt
	upsertCartStmt          *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                      tx,
		tx:                      tx,
		addPrintStmt:            q.addPrintStmt,
		deletePrintStmt:         q.deletePrintStmt,
		getCartsStmt:            q.getCartsStmt,
		getUserCartStmt:         q.getUserCartStmt,
		updatePrintQuantityStmt: q.updatePrintQuantityStmt,
		upsertCartStmt:          q.upsertCartStmt,
	}
}
